name: Auto-merge PRs and Update HTML
on:
  pull_request_target:
    types: [opened, synchronize]
    paths:
      - 'Contributors.md'
    
jobs:
  auto-merge-and-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Check if PR only modifies Contributors.md
        id: is_only_contributors_file_changed
        run: |
          PR_FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          FILES_CHANGED=$(echo $PR_FILES | tr '\n' ' ')

          echo "files_changed=$FILES_CHANGED" >> $GITHUB_ENV
          
          if [[ "${FILES_CHANGED// /}" == "Contributors.md" ]]; then
            echo "only_contributors=true" >> $GITHUB_ENV
          else
            echo "only_contributors=false" >> $GITHUB_ENV
          fi

      - name: Check if PR has only one line change
        run: |
          ADDITIONS=${{ github.event.pull_request.additions }}
          DELETIONS=${{ github.event.pull_request.deletions }}

          echo "additions=$ADDITIONS" >> $GITHUB_ENV
          echo "deletions=$DELETIONS" >> $GITHUB_ENV

          if [[ $ADDITIONS == 1 && $DELETIONS == 0 ]]; then
            echo "one_line_change=true" >> $GITHUB_ENV
          elif [[ $ADDITIONS == 2 && $DELETIONS == 1 ]]; then
            echo "one_line_change=true" >> $GITHUB_ENV
          else
            echo "one_line_change=false" >> $GITHUB_ENV
          fi

      - name: Merge PR
        id: merge_pr
        if: env.only_contributors == 'true' && env.one_line_change == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const response = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: "squash"
              })

              if (response.status === 200) {
                const message = `Hello @${context.payload.pull_request.user.login}, congratulations! Your pull request has been successfully merged. Thank you for your contribution!`;

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: message
                })
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: "Something went wrong while attempting to merge this pull request. Please check the GitHub Actions log for more information."
                })
              }
            } catch (error) {
              console.error("Error merging pull request:", error.message);
              let errMsg = "An error occurred while trying to merge the pull request.";

              if (error.status === 405 && error.response.data.message === "Pull Request is not mergeable") {
                errMsg = `Hello @${context.payload.pull_request.user.login}, thank you for your pull request. However, there is a merge conflict with the target branch. Please resolve the conflicts and update your pull request.`;
              } else if (error.status === 409) {
                errMsg = "The pull request has conflicts with the target branch. Please resolve the conflicts before merging.";
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errMsg
              })

              core.setFailed(error.message);
            }

      - name: Checkout main branch
        if: steps.merge_pr.outcome == 'success'
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        if: steps.merge_pr.outcome == 'success'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Update index.html
        if: steps.merge_pr.outcome == 'success'
        run: |
          import re
          
          # Read Contributors.md
          with open('Contributors.md', 'r') as f:
              contributors = re.findall(r'\[(.+?)\]', f.read())
          
          # Read index.html
          with open('index.html', 'r') as f:
              html_content = f.read()
          
          # Create new card divs
          new_cards = '\n'.join([f'      <div class="card">{name}</div>' for name in contributors])
          
          # Replace existing cards with new ones
          updated_html = re.sub(
              r'<div class="grid">.*?</div>',
              f'<div class="grid">\n{new_cards}\n    </div>',
              html_content,
              flags=re.DOTALL
          )
          
          # Write updated content back to index.html
          with open('index.html', 'w') as f:
              f.write(updated_html)
        shell: python

      - name: Commit and push if changed
        if: steps.merge_pr.outcome == 'success'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add index.html
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update contributors in index.html" && git push)

      - name: Post comment on PR if not merged automatically
        if: env.only_contributors != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const body = `Thank you for your pull request. This pull request contains changes in files which requires review. The following files were changed:\n\n${process.env.files_changed.trim() ? `\n\n${process.env.files_changed.trim().split(' ').map(file => `- ${file}`).join('\n')}` : ''}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}